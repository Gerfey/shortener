// Code generated by MockGen. DO NOT EDIT.
// Source: internal/models/repository.go
//
// Generated by this command:
//
//	mockgen -source=internal/models/repository.go -destination=internal/mock/mock_repository.go -package=mock
//

// Package mock is a generated GoMock package.
package mock

import (
	context "context"
	reflect "reflect"

	models "github.com/Gerfey/shortener/internal/models"
	gomock "go.uber.org/mock/gomock"
)

// MockRepository is a mock of Repository interface.
type MockRepository struct {
	ctrl     *gomock.Controller
	recorder *MockRepositoryMockRecorder
	isgomock struct{}
}

// MockRepositoryMockRecorder is the mock recorder for MockRepository.
type MockRepositoryMockRecorder struct {
	mock *MockRepository
}

// NewMockRepository creates a new mock instance.
func NewMockRepository(ctrl *gomock.Controller) *MockRepository {
	mock := &MockRepository{ctrl: ctrl}
	mock.recorder = &MockRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockRepository) EXPECT() *MockRepositoryMockRecorder {
	return m.recorder
}

// All mocks base method.
func (m *MockRepository) All(ctx context.Context) map[string]string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "All", ctx)
	ret0, _ := ret[0].(map[string]string)
	return ret0
}

// All indicates an expected call of All.
func (mr *MockRepositoryMockRecorder) All(ctx any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "All", reflect.TypeOf((*MockRepository)(nil).All), ctx)
}

// DeleteUserURLsBatch mocks base method.
func (m *MockRepository) DeleteUserURLsBatch(ctx context.Context, shortURLs []string, userID string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteUserURLsBatch", ctx, shortURLs, userID)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteUserURLsBatch indicates an expected call of DeleteUserURLsBatch.
func (mr *MockRepositoryMockRecorder) DeleteUserURLsBatch(ctx, shortURLs, userID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteUserURLsBatch", reflect.TypeOf((*MockRepository)(nil).DeleteUserURLsBatch), ctx, shortURLs, userID)
}

// Find mocks base method.
func (m *MockRepository) Find(ctx context.Context, key string) (string, bool, bool) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Find", ctx, key)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(bool)
	ret2, _ := ret[2].(bool)
	return ret0, ret1, ret2
}

// Find indicates an expected call of Find.
func (mr *MockRepositoryMockRecorder) Find(ctx, key any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Find", reflect.TypeOf((*MockRepository)(nil).Find), ctx, key)
}

// FindShortURL mocks base method.
func (m *MockRepository) FindShortURL(ctx context.Context, originalURL string) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindShortURL", ctx, originalURL)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindShortURL indicates an expected call of FindShortURL.
func (mr *MockRepositoryMockRecorder) FindShortURL(ctx, originalURL any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindShortURL", reflect.TypeOf((*MockRepository)(nil).FindShortURL), ctx, originalURL)
}

// GetUserURLs mocks base method.
func (m *MockRepository) GetUserURLs(ctx context.Context, userID string) ([]models.URLPair, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUserURLs", ctx, userID)
	ret0, _ := ret[0].([]models.URLPair)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetUserURLs indicates an expected call of GetUserURLs.
func (mr *MockRepositoryMockRecorder) GetUserURLs(ctx, userID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUserURLs", reflect.TypeOf((*MockRepository)(nil).GetUserURLs), ctx, userID)
}

// Ping mocks base method.
func (m *MockRepository) Ping(ctx context.Context) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Ping", ctx)
	ret0, _ := ret[0].(error)
	return ret0
}

// Ping indicates an expected call of Ping.
func (mr *MockRepositoryMockRecorder) Ping(ctx any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Ping", reflect.TypeOf((*MockRepository)(nil).Ping), ctx)
}

// Save mocks base method.
func (m *MockRepository) Save(ctx context.Context, key, value, userID string) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Save", ctx, key, value, userID)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Save indicates an expected call of Save.
func (mr *MockRepositoryMockRecorder) Save(ctx, key, value, userID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Save", reflect.TypeOf((*MockRepository)(nil).Save), ctx, key, value, userID)
}

// SaveBatch mocks base method.
func (m *MockRepository) SaveBatch(ctx context.Context, urls map[string]string, userID string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SaveBatch", ctx, urls, userID)
	ret0, _ := ret[0].(error)
	return ret0
}

// SaveBatch indicates an expected call of SaveBatch.
func (mr *MockRepositoryMockRecorder) SaveBatch(ctx, urls, userID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SaveBatch", reflect.TypeOf((*MockRepository)(nil).SaveBatch), ctx, urls, userID)
}

// MockStorageStrategy is a mock of StorageStrategy interface.
type MockStorageStrategy struct {
	ctrl     *gomock.Controller
	recorder *MockStorageStrategyMockRecorder
	isgomock struct{}
}

// MockStorageStrategyMockRecorder is the mock recorder for MockStorageStrategy.
type MockStorageStrategyMockRecorder struct {
	mock *MockStorageStrategy
}

// NewMockStorageStrategy creates a new mock instance.
func NewMockStorageStrategy(ctrl *gomock.Controller) *MockStorageStrategy {
	mock := &MockStorageStrategy{ctrl: ctrl}
	mock.recorder = &MockStorageStrategyMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockStorageStrategy) EXPECT() *MockStorageStrategyMockRecorder {
	return m.recorder
}

// Close mocks base method.
func (m *MockStorageStrategy) Close() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Close")
	ret0, _ := ret[0].(error)
	return ret0
}

// Close indicates an expected call of Close.
func (mr *MockStorageStrategyMockRecorder) Close() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Close", reflect.TypeOf((*MockStorageStrategy)(nil).Close))
}

// Initialize mocks base method.
func (m *MockStorageStrategy) Initialize() (models.Repository, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Initialize")
	ret0, _ := ret[0].(models.Repository)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Initialize indicates an expected call of Initialize.
func (mr *MockStorageStrategyMockRecorder) Initialize() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Initialize", reflect.TypeOf((*MockStorageStrategy)(nil).Initialize))
}
